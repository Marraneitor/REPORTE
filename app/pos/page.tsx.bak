"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Minus, Plus, Search, ShoppingCart, Trash, User, Menu, Plus as PlusIcon } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { CustomerCard } from "@/components/pos/customer-card";
import { ProductCard } from "@/components/pos/product-card";
import { QuickCustomerForm } from "@/components/pos/quick-customer-form";
import { useTranslation } from "@/lib/i18n/i18n-context";
import { PRODUCTS, Product } from "@/lib/data/products";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { toast } from "sonner";
import { getStoredData, setStoredData, STORAGE_KEYS } from "@/lib/local-storage";

type Customer = {
  id: number;
  name: string;
  phone: string;
  address: string;
  points: number;
};

type CartItem = {
  product: Product;
  quantity: number;
};

const CATEGORIES = [
  { id: "all", label: "Todos" },
  { id: "Entradas", label: "Entradas" },
  { id: "Hamburguesas", label: "Hamburguesas" },
  { id: "Hot Dogs", label: "Hot Dogs" },
  { id: "Complementos", label: "Complementos" },
];

// Simular clientes - esto vendría de tu backend
const CUSTOMERS: Customer[] = [];

export default function POSPage() {
  const { t } = useTranslation();
  const [cart, setCart] = useState<CartItem[]>(() => getStoredData(STORAGE_KEYS.CART, []));
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(() => getStoredData(STORAGE_KEYS.SELECTED_CUSTOMER, null));
  const [customers, setCustomers] = useState<Customer[]>(() => getStoredData(STORAGE_KEYS.CUSTOMERS, []));
  const [searchTerm, setSearchTerm] = useState("");
  const [customerSearchTerm, setCustomerSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("all");
  const [discount, setDiscount] = useState(0);
  const [paymentMethod, setPaymentMethod] = useState<"cash" | "card">("cash");
  const [processing, setProcessing] = useState(false);
  const [showCart, setShowCart] = useState(false);
  const [showNewCustomerForm, setShowNewCustomerForm] = useState(false);
  const [cashReceived, setCashReceived] = useState<number>(0);

  // Guardar cambios en el carrito
  useEffect(() => {
    setStoredData(STORAGE_KEYS.CART, cart);
  }, [cart]);

  // Guardar cambios en los clientes
  useEffect(() => {
    setStoredData(STORAGE_KEYS.CUSTOMERS, customers);
  }, [customers]);

  // Guardar cliente seleccionado
  useEffect(() => {
    setStoredData(STORAGE_KEYS.SELECTED_CUSTOMER, selectedCustomer);
  }, [selectedCustomer]);

  const filteredProducts = PRODUCTS.filter((product) => {
    const matchesSearch = product.nombre.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === "all" || product.categoria === selectedCategory;
    return matchesSearch && matchesCategory && product.disponible;
  });

  const filteredCustomers = customers.filter((customer) =>
    customer.name.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||
    customer.phone.includes(customerSearchTerm)
  );

  const addToCart = (product: Product) => {
    setCart(currentCart => {
      const existingItem = currentCart.find(item => item.product.nombre === product.nombre);
      if (existingItem) {
        return currentCart.map(item =>
          item.product.nombre === product.nombre
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      }
      return [...currentCart, { product, quantity: 1 }];
    });
    toast.success(t("pos.productAdded") || "Producto agregado al carrito");
  };

  const removeFromCart = (productName: string) => {
    setCart(cart.filter(item => item.product.nombre !== productName));
  };

  const updateQuantity = (productName: string, newQuantity: number) => {
    if (newQuantity < 1) {
      removeFromCart(productName);
      return;
    }
    setCart(cart.map(item =>
      item.product.nombre === productName
        ? { ...item, quantity: newQuantity }
        : item
    ));
  };

  const handleCustomerSelect = (customer: Customer) => {
    setSelectedCustomer(customer);
    setCustomerSearchTerm("");
  };

  const handleNewCustomer = (data: { name: string; phone: string; address: string }) => {
    const newCustomer: Customer = {
      id: Date.now(),
      ...data,
      points: 0,
    };
    const updatedCustomers = [...customers, newCustomer];
    setCustomers(updatedCustomers);
    setSelectedCustomer(newCustomer);
    setShowNewCustomerForm(false);
    toast.success(t("customers.addedSuccess") || "Cliente agregado con éxito");
  };

  const subtotal = cart.reduce((sum, item) => sum + item.product.precioVenta * item.quantity, 0);
  const discountAmount = (subtotal * discount) / 100;
  const total = subtotal - discountAmount;

  const handleCompleteSale = async () => {
    if (cart.length === 0) {
      toast.error(t("pos.emptyCartError") || "El carrito está vacío");
      return;
    }

    setProcessing(true);
    try {
      const sale = {
        id: Date.now(),
        date: new Date().toISOString(),
        customer: selectedCustomer ? {
          id: selectedCustomer.id,
          name: selectedCustomer.name
        } : null,
        items: cart.map(item => ({
          id: Date.now(),
          name: item.product.nombre,
          price: item.product.precioVenta,
          quantity: item.quantity,
          total: item.product.precioVenta * item.quantity
        })),
        subtotal,
        discount: discountAmount,
        total,
        paymentMethod,
        cashReceived: paymentMethod === "cash" ? cashReceived : undefined,
        change: paymentMethod === "cash" ? cashReceived - total : undefined
      };

      // Aquí irían las llamadas al backend
      console.log('Procesando venta:', sale);
      
      // Limpiar el estado
      setCart([]);
      setSelectedCustomer(null);
      setDiscount(0);
      setPaymentMethod("cash");
      setCashReceived(0);
      toast.success(t("pos.saleComplete") || "Venta completada con éxito");
    } catch (error) {
      console.error('Error al procesar la venta:', error);
      toast.error(t("pos.saleError") || "Error al procesar la venta");
    } finally {
      setProcessing(false);
    }
  };

  const CartContent = () => (
    <div className="flex flex-col h-full">
      <div className="flex items-center justify-between p-4 border-b">
        <div>
          <h3 className="font-semibold">{t("pos.cart") || "Carrito"}</h3>
          <p className="text-sm text-muted-foreground">{t("pos.current_order") || "Orden Actual"}</p>
        </div>
        {selectedCustomer && (
          <Badge variant="outline" className="ml-2">
            {selectedCustomer.name}
          </Badge>
        )}
      </div>

      <ScrollArea className="flex-1">
        <div className="p-4 space-y-4">
          {cart.length === 0 ? (
            <div className="text-center py-8 text-muted-foreground">
              <ShoppingCart className="mx-auto h-8 w-8 mb-2" />
              <p>{t("pos.empty_cart") || "Tu carrito está vacío"}</p>
            </div>
          ) : (
            cart.map((item) => (
              <div key={item.product.nombre} className="flex items-center justify-between bg-muted/50 rounded-lg p-3">
                <div className="flex-1 min-w-0">
                  <div className="font-medium truncate">{item.product.nombre}</div>
                  <div className="text-sm text-muted-foreground">
                    ${item.product.precioVenta.toFixed(2)} x {item.quantity}
                  </div>
                </div>
                <div className="flex items-center gap-2 ml-4">
                  <Button
                    variant="outline"
                    size="icon"
                    className="h-8 w-8"
                    onClick={() => updateQuantity(item.product.nombre, item.quantity - 1)}
                  >
                    <Minus className="h-4 w-4" />
                  </Button>
                  <span className="w-8 text-center">{item.quantity}</span>
                  <Button
                    variant="outline"
                    size="icon"
                    className="h-8 w-8"
                    onClick={() => updateQuantity(item.product.nombre, item.quantity + 1)}
                  >
                    <Plus className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="outline"
                    size="icon"
                    className="h-8 w-8"
                    onClick={() => removeFromCart(item.product.nombre)}
                  >
                    <Trash className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            ))
          )}
        </div>
      </ScrollArea>

      <div className="border-t p-4 space-y-4">
        <div className="space-y-1.5">
          <div className="flex justify-between">
            <span className="text-muted-foreground">{t("pos.subtotal") || "Subtotal"}</span>
            <span>${subtotal.toFixed(2)}</span>
          </div>
          <div className="flex items-center gap-2">
            <span className="text-muted-foreground">{t("pos.discount_percent") || "Descuento (%)"}</span>
            <Input
              type="number"
              value={discount}
              onChange={(e) => setDiscount(Number(e.target.value))}
              className="w-20"
              min="0"
              max="100"
            />
            <span className="ml-auto">${discountAmount.toFixed(2)}</span>
          </div>
          <Separator />
          <div className="flex justify-between text-lg font-semibold">
            <span>{t("pos.total") || "Total"}</span>
            <span>${total.toFixed(2)}</span>
          </div>
        </div>

        <div className="space-y-4">
          <div>
            <Label>{t("pos.payment_method") || "Método de Pago"}</Label>
            <RadioGroup value={paymentMethod} onValueChange={(value: "cash" | "card") => setPaymentMethod(value)} className="mt-2">
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="cash" id="cash" />
                <Label htmlFor="cash">{t("pos.cash") || "Efectivo"}</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="card" id="card" />
                <Label htmlFor="card">{t("pos.card") || "Tarjeta"}</Label>
              </div>
            </RadioGroup>
          </div>

          {paymentMethod === "cash" && (
            <div className="space-y-2">
              <div>
                <Label>{t("pos.cash_received") || "Efectivo Recibido"}</Label>
                <Input
                  type="number"
                  value={cashReceived || ""}
                  onChange={(e) => setCashReceived(Number(e.target.value))}
                  className="mt-1"
                  min={total}
                  step="0.01"
                  placeholder="0.00"
                />
              </div>
              {cashReceived >= total && (
                <div className="flex justify-between font-medium text-green-600">
                  <span>{t("pos.change") || "Cambio"}</span>
                  <span>${(cashReceived - total).toFixed(2)}</span>
                </div>
              )}
            </div>
          )}
        </div>

        <Button 
          className="w-full" 
          disabled={processing || cart.length === 0 || (paymentMethod === "cash" && cashReceived < total)} 
          onClick={handleCompleteSale}
        >
          {processing ? (
            <>{t("pos.processing") || "Procesando..."}</>
          ) : (
            <>{t("pos.complete_order") || "Completar Orden"}</>
          )}
        </Button>
      </div>
    </div>
  );

  return (
    <div className="h-[100dvh] flex flex-col bg-background">
      {/* Header */}
      <div className="flex-none p-4 border-b">
        <div className="flex items-center justify-between gap-4">
          <h1 className="text-xl font-semibold truncate">
            {t("pos.title") || "Punto de Venta"}
          </h1>
          
          <div className="flex items-center gap-2">
            <Dialog>
              <DialogTrigger asChild>
                <Button variant="outline" size="sm" className="hidden md:flex items-center gap-2">
                  <User className="h-4 w-4" />
                  <span className="truncate">
                    {selectedCustomer ? selectedCustomer.name : t("pos.select_customer") || "Seleccionar Cliente"}
                  </span>
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-lg">
                <DialogHeader>
                  <DialogTitle>{t("pos.select_customer") || "Seleccionar Cliente"}</DialogTitle>
                  <DialogDescription>
                    {t("pos.search_select_customer") || "Buscar y seleccionar un cliente"}
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4">
                  <div className="relative">
                    <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                    <Input
                      type="search"
                      placeholder={t("pos.search_customers") || "Buscar clientes..."}
                      className="w-full pl-8"
                      value={customerSearchTerm}
                      onChange={(e) => setCustomerSearchTerm(e.target.value)}
                    />
                  </div>
                  <ScrollArea className="h-[300px]">
                    {filteredCustomers.length === 0 ? (
                      <div className="text-center py-4 text-muted-foreground">
                        <p>{t("pos.no_customers") || "No se encontraron clientes"}</p>
                      </div>
                    ) : (
                      <div className="space-y-2">
                        {filteredCustomers.map((customer) => (
                          <CustomerCard
                            key={customer.id}
                            customer={customer}
                            selected={selectedCustomer?.id === customer.id}
                            onClick={() => handleCustomerSelect(customer)}
                          />
                        ))}
                      </div>
                    )}
                  </ScrollArea>
                </div>
              </DialogContent>
            </Dialog>

            {/* Mobile Cart Toggle */}
            <Sheet open={showCart} onOpenChange={setShowCart}>
              <SheetTrigger asChild>
                <Button variant="outline" size="icon" className="relative md:hidden">
                  <ShoppingCart className="h-4 w-4" />
                  {cart.length > 0 && (
                    <Badge className="absolute -top-2 -right-2 h-5 w-5 p-0 flex items-center justify-center">
                      {cart.length}
                    </Badge>
                  )}
                </Button>
              </SheetTrigger>
              <SheetContent side="right" className="w-full sm:w-96 p-0">
                <CartContent />
              </SheetContent>
            </Sheet>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex md:gap-4 overflow-hidden">
        {/* Products Section */}
        <div className="flex-1 flex flex-col min-w-0">
          <div className="p-4 space-y-4">
            <div className="flex gap-4 flex-col sm:flex-row">
              <Input
                type="search"
                placeholder={t("pos.search_products") || "Buscar productos..."}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="flex-1"
              />
              <Dialog>
                <DialogTrigger asChild>
                  <Button variant="outline" size="icon" className="md:hidden">
                    <User className="h-4 w-4" />
                  </Button>
                </DialogTrigger>
                {/* ... Customer selection dialog content ... */}
              </Dialog>
            </div>

            <Tabs defaultValue="all" value={selectedCategory} onValueChange={setSelectedCategory}>
              <TabsList className="w-full h-auto flex flex-wrap gap-1">
                {CATEGORIES.map((category) => (
                  <TabsTrigger 
                    key={category.id} 
                    value={category.id}
                    className="flex-1 min-w-20"
                  >
                    {category.label}
                  </TabsTrigger>
                ))}
              </TabsList>
            </Tabs>
          </div>

          <ScrollArea className="flex-1 p-4">
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
              {filteredProducts.map((product) => (
                <ProductCard
                  key={product.nombre}
                  product={product}
                  onAddToCart={() => addToCart(product)}
                />
              ))}
            </div>
          </ScrollArea>
        </div>

        {/* Desktop Cart */}
        <div className="hidden md:block w-[400px] border-l">
          <CartContent />
        </div>
      </div>
    </div>
  );
}